{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INGInious Coding Style \u00b6 INGInious Coding Style is a plugin for INGInious 0.7 and up that allows tutors to grade several aspect of student submissions' coding style. INGInious Coding Style should be easy to use for both tutors and students. The plugin adds new buttons and elements to various existing menus in the application that can be used to add and view coding style grades. Plugin Additions \u00b6 The plugin makes changes to various existing elements in INGInious, as well as adding some new pages. Note All design is subject to change. As such, some screenshots might show outdated page designs. Grade Overview \u00b6 Students can view their coding style grades for each task on a course's task list. Submission Query \u00b6 New elements are added to the results displayed when querying submissions ( /admin/<courseid>/submissions ) denoting whether or not a submission has coding style grades. The header text for the new column is configurable: header . Detailed Feedback For a Single Submission \u00b6 Students can read detailed feedback by clicking on the new \"Coding Style Grades\" button found on the task page. Submission Grading Button \u00b6 A new button is added to a submission's admin menu, so that tutors and admins can access the coding style grading interface for a submission. Pressing the button leads to the grading interface for the submission.","title":"INGInious Coding Style"},{"location":"#inginious-coding-style","text":"INGInious Coding Style is a plugin for INGInious 0.7 and up that allows tutors to grade several aspect of student submissions' coding style. INGInious Coding Style should be easy to use for both tutors and students. The plugin adds new buttons and elements to various existing menus in the application that can be used to add and view coding style grades.","title":"INGInious Coding Style"},{"location":"#plugin-additions","text":"The plugin makes changes to various existing elements in INGInious, as well as adding some new pages. Note All design is subject to change. As such, some screenshots might show outdated page designs.","title":"Plugin Additions"},{"location":"#grade-overview","text":"Students can view their coding style grades for each task on a course's task list.","title":"Grade Overview"},{"location":"#submission-query","text":"New elements are added to the results displayed when querying submissions ( /admin/<courseid>/submissions ) denoting whether or not a submission has coding style grades. The header text for the new column is configurable: header .","title":"Submission Query"},{"location":"#detailed-feedback-for-a-single-submission","text":"Students can read detailed feedback by clicking on the new \"Coding Style Grades\" button found on the task page.","title":"Detailed Feedback For a Single Submission"},{"location":"#submission-grading-button","text":"A new button is added to a submission's admin menu, so that tutors and admins can access the coding style grading interface for a submission. Pressing the button leads to the grading interface for the submission.","title":"Submission Grading Button"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.5.3] 2021-12-22 \u00b6 Fixed \u00b6 Exception not being displayed when rendering alert.html . Remove category confirmation prompt not having quotes around category name/id. [1.5.2] 2021-12-10 \u00b6 Fixed \u00b6 Config repair alert now displays exception message if config cannot be repaired. [1.5.1] 2021-12-08 \u00b6 Added \u00b6 Detection and repair of config that cannot be written to by inginious-webapp. Now shows an alert and button that can be pressed to attempt to make the configuration file writable. [1.5.0] 2021-12-05 \u00b6 Added \u00b6 graded_by attribute for submissions which keeps track of which tutors/admins have graded a submission. This change is reflected on the front-end as well. Option to show/hide the graded_by info in the sidebar of student coding style grades overview ( /submissions/<submissionid>/codingstyle ). Plugin configuration menu in the INGInious WebApp which can be located in the sidebar of the administration page of any course ( /admin/<courseid>/settings ). Changed \u00b6 All references to \"correctness\" have been replaced by \"completion\". [1.4.0] - 2021-08-11 \u00b6 Added \u00b6 Confirmation prompt when deleting inactive category. Rounding of weighted mean grade. Customizable task list progress bars. [1.3.0] - 2021-08-09 \u00b6 Added \u00b6 Button to delete coding style grades from a submission. Fixed \u00b6 Permission checking for admin-only pages. Prior to this version, students could edit their own (but not other's) submissions' coding style grades. (oops) Changed \u00b6 Refactored submission, course and task retrieval for INGIniousPage subclasses. They now share a common interface for retrieving these. [1.2.0] - 2021-08-08 \u00b6 Added \u00b6 Submission query page hooks. Coding style grade status column to submission query page. Coding style grading button to submission query page. submission_query config section. Weighted mean grade calculation. Based on the previous merge_grades functionality, but now lets administrators define a custom weight for coding style grades used to find the weighted mean. Option to show separate bars for automated completion grade given by INGInious and coding style grade ( task_list_bar ). Changed \u00b6 merge_grades config section has been renamed to weighted_mean . Removed \u00b6 experimental section in config. [1.1.1] - 2021-08-03 \u00b6 Fixed \u00b6 Attempting to remove an inactive category raising an exception due to not using the new Pydantic Submission model. Student grades page navbar breadcrumb. [1.1.0] - 2021-08-03 \u00b6 Added \u00b6 Shared exception handling functionality for subclasses of INGIniousPage . Exception handler for ValidationError exceptions. Currently logs the exception and displays Internal Server Error in the browser. Changed \u00b6 Submissions are now validated with Pydantic. This makes it easier to reason with the code, as there is now a distinction between a raw submission returned by the INGInious SubmissionManager and a submission that has been parsed by the plugin and been assigned a CodingStyleGrades object. [1.0.2] 2021-08-01 \u00b6 Added \u00b6 Mean grade to sidebar of grades page (admin+student). Tooltip to button for removing disabled category from a submission. Changed \u00b6 Elements on grades page (admin+student) should line up more evenly now. Fixed \u00b6 Incorrect rendering of grades page (admin+student) when an odd number of grading categories are enabled. Removing a disabled category from submission on grades page (admin) always raising a TypeError exception. [1.0.1] 2021-07-29 \u00b6 Added \u00b6 README to PyPi build. Fixed \u00b6 Include up-to-date version of pyproject.toml . [1.0.0] 2021-07-29 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#153-2021-12-22","text":"","title":"[1.5.3] 2021-12-22"},{"location":"changelog/#fixed","text":"Exception not being displayed when rendering alert.html . Remove category confirmation prompt not having quotes around category name/id.","title":"Fixed"},{"location":"changelog/#152-2021-12-10","text":"","title":"[1.5.2] 2021-12-10"},{"location":"changelog/#fixed_1","text":"Config repair alert now displays exception message if config cannot be repaired.","title":"Fixed"},{"location":"changelog/#151-2021-12-08","text":"","title":"[1.5.1] 2021-12-08"},{"location":"changelog/#added","text":"Detection and repair of config that cannot be written to by inginious-webapp. Now shows an alert and button that can be pressed to attempt to make the configuration file writable.","title":"Added"},{"location":"changelog/#150-2021-12-05","text":"","title":"[1.5.0] 2021-12-05"},{"location":"changelog/#added_1","text":"graded_by attribute for submissions which keeps track of which tutors/admins have graded a submission. This change is reflected on the front-end as well. Option to show/hide the graded_by info in the sidebar of student coding style grades overview ( /submissions/<submissionid>/codingstyle ). Plugin configuration menu in the INGInious WebApp which can be located in the sidebar of the administration page of any course ( /admin/<courseid>/settings ).","title":"Added"},{"location":"changelog/#changed","text":"All references to \"correctness\" have been replaced by \"completion\".","title":"Changed"},{"location":"changelog/#140-2021-08-11","text":"","title":"[1.4.0] - 2021-08-11"},{"location":"changelog/#added_2","text":"Confirmation prompt when deleting inactive category. Rounding of weighted mean grade. Customizable task list progress bars.","title":"Added"},{"location":"changelog/#130-2021-08-09","text":"","title":"[1.3.0] - 2021-08-09"},{"location":"changelog/#added_3","text":"Button to delete coding style grades from a submission.","title":"Added"},{"location":"changelog/#fixed_2","text":"Permission checking for admin-only pages. Prior to this version, students could edit their own (but not other's) submissions' coding style grades. (oops)","title":"Fixed"},{"location":"changelog/#changed_1","text":"Refactored submission, course and task retrieval for INGIniousPage subclasses. They now share a common interface for retrieving these.","title":"Changed"},{"location":"changelog/#120-2021-08-08","text":"","title":"[1.2.0] - 2021-08-08"},{"location":"changelog/#added_4","text":"Submission query page hooks. Coding style grade status column to submission query page. Coding style grading button to submission query page. submission_query config section. Weighted mean grade calculation. Based on the previous merge_grades functionality, but now lets administrators define a custom weight for coding style grades used to find the weighted mean. Option to show separate bars for automated completion grade given by INGInious and coding style grade ( task_list_bar ).","title":"Added"},{"location":"changelog/#changed_2","text":"merge_grades config section has been renamed to weighted_mean .","title":"Changed"},{"location":"changelog/#removed","text":"experimental section in config.","title":"Removed"},{"location":"changelog/#111-2021-08-03","text":"","title":"[1.1.1] - 2021-08-03"},{"location":"changelog/#fixed_3","text":"Attempting to remove an inactive category raising an exception due to not using the new Pydantic Submission model. Student grades page navbar breadcrumb.","title":"Fixed"},{"location":"changelog/#110-2021-08-03","text":"","title":"[1.1.0] - 2021-08-03"},{"location":"changelog/#added_5","text":"Shared exception handling functionality for subclasses of INGIniousPage . Exception handler for ValidationError exceptions. Currently logs the exception and displays Internal Server Error in the browser.","title":"Added"},{"location":"changelog/#changed_3","text":"Submissions are now validated with Pydantic. This makes it easier to reason with the code, as there is now a distinction between a raw submission returned by the INGInious SubmissionManager and a submission that has been parsed by the plugin and been assigned a CodingStyleGrades object.","title":"Changed"},{"location":"changelog/#102-2021-08-01","text":"","title":"[1.0.2] 2021-08-01"},{"location":"changelog/#added_6","text":"Mean grade to sidebar of grades page (admin+student). Tooltip to button for removing disabled category from a submission.","title":"Added"},{"location":"changelog/#changed_4","text":"Elements on grades page (admin+student) should line up more evenly now.","title":"Changed"},{"location":"changelog/#fixed_4","text":"Incorrect rendering of grades page (admin+student) when an odd number of grading categories are enabled. Removing a disabled category from submission on grades page (admin) always raising a TypeError exception.","title":"Fixed"},{"location":"changelog/#101-2021-07-29","text":"","title":"[1.0.1] 2021-07-29"},{"location":"changelog/#added_7","text":"README to PyPi build.","title":"Added"},{"location":"changelog/#fixed_5","text":"Include up-to-date version of pyproject.toml .","title":"Fixed"},{"location":"changelog/#100-2021-07-29","text":"Initial release.","title":"[1.0.0] 2021-07-29"},{"location":"configuration/","text":"Configuration \u00b6 INGInious Coding Style is highly configurable and provides granular control of the majority of its features. Despite this, extensive configuration is not necessary, as the plugin tries to implement sensible defaults, and therefore should just work straight out of the box. Minimal Configuration \u00b6 The following YAML snippet provides the default plugin configuration, and is a good starting point for exploring the plugin's functionality: plugins : - plugin_module : inginious_coding_style name : \"INGInious Coding Style\" The minimal configuration enables all default categories: comments modularity structure idiomaticity . See Default Categories for more information about the default categories. Full Configuration \u00b6 Below is an example of a configuration making use of all available configuration options. plugins : - plugin_module : inginious_coding_style name : \"INGInious Coding Style\" enabled : # This enables all default categories + 1 custom category - comments - modularity - structure - idiomaticity - coolness # Our custom category categories : # This is a definition for a new category - id : coolness name : Coolness description : How cool the code looks B-) # This redefines a default category - id : comments name : Kommentering description : Hvor godt kommentert koden er. submission_query : header : CSG priority : 3000 button : true weighted_mean : enabled : true weighting : 0.25 round : true round_digits : 2 task_list_bars : total_grade : enabled : true label : Grade base_grade : enabled : true label : Completion style_grade : enabled : true label : Coding Style show_graders : false Parameters \u00b6 name \u00b6 Display name of the plugin default : 'INGInious Coding Style' type : string required : False enabled \u00b6 Which coding style categories to enable. Omitting this parameter enables all default categories ( comments modularity structure idiomaticity ). default : [ 'comments' , 'modularity' , 'structure' , 'idiomaticity' ] type : array items : { 'type' : 'string' } required : False categories \u00b6 Define new grading categories or modify default grading categories. Each category has the following parameters: id \u00b6 Unique ID of the category. type : string required : True name \u00b6 Display name of category. Defaults to id.title() if omitted. type : string required : False description \u00b6 Description of category. This should describe the criteria used for grading. type : string required : True submission_query \u00b6 Settings for the submissions query results table ( /admin/<courseid>/submissions ). header \u00b6 The header text for the plugin's column in the query results table. default : 'CSG' type : string required : False button \u00b6 Adds an additional button to each search result row that links to the submission's coding style grading page. default : True type : boolean required : False priority \u00b6 The priority of the plugin hook. The priority must be a number that is unique to the plugin in order to avoid column ordering issues. In cases where the plugin's header does not match its corresponding column in the table body, try to change priority to a different number. Given the low number of INGInious plugins in existence, this should virtually never happen, though. default : 3000 type : integer required : False weighted_mean \u00b6 Calculates a new grade for submissions after they have received coding style grades by finding the mean of automated INGInious grade and coding style grades: new_grade = (automated_grade * (1 - weighting)) + (coding_style_grade_mean * weighting) Example >>> automated_grade = 100 >>> mean_style_grade = 80 >>> weighting = 0.25 >>> new_grade = ( automated_grade * ( 1 - weighting )) + ( mean_style_grade * weighting ) >>> new_grade 95.0 enabled \u00b6 Enable weighted mean grade calculation. default : False type : boolean required : False weighting \u00b6 How much of the final grade the coding style grades should make up. Example \u00b6 weighting = 0.25 base_grade_weight = 1 - weighting base_grade_weight == 0.75 When weighting is set to 0.25, the style grades will make up 25% of the submission's final grade, while its base grade will make up the remaining 75%. default : 0.25 minimum : 0.0 maximum : 1.0 type : number required : False round \u00b6 Whether to round the weighted mean grade or not. default : True type : boolean required : False round_digits \u00b6 Number of digits after decimal point to round to. Has no effect if round is disabled. default : 2 minimum : 0 type : integer required : False task_list_bars \u00b6 Settings for the various bars displayed on the task list. total_grade \u00b6 The bar displaying the submission's final grade. This bar cannot be disabled, but its label can be. enabled \u00b6 Visibility of the total grade bar's label. default : True type : boolean required : False label \u00b6 Label for the total grade bar. default : True type : boolean required : False base_grade \u00b6 The bar displaying the submission's base grade (the grade given by the automatic INGInious grader). This bar can be disabled in its entirety. enabled \u00b6 Visibility of the base grade bar. Has no effect if weighted_mean is disabled. default : True type : boolean required : False label \u00b6 Label for the total grade bar. default : True type : boolean required : False style_grade \u00b6 The bar displaying the submission's mean coding style grade. This bar can be disabled in its entirety. enabled \u00b6 Visibility of the coding style grade bar. default : True type : boolean required : False label \u00b6 Label for the coding style grade bar. default : True type : boolean required : False show_graders \u00b6 Display a list of tutors/admins who have graded the submission in the sidebar of a student submissions coding style grade page ( /submissions/<submissionid>/codingstyle ). default : False type : boolean required : False Default Categories \u00b6 INGInious Coding Style comes with 4 default grading categories. If you want to change the names or descriptions of these categories, you can override them in your INGInious configuration file. Attention The id parameter of a category must match the default category's ID if you wish to overwrite a default category. If you simply wish to disable a default category, omit its ID from the top-level enabled parameter. The following is a YAML snippet that includes the definitions for all default categories, which can be added to the plugin configuration should you wish to expand on the existing decriptions or otherwise modify the categories: - id : comments name : Comments description : Appropriate use of comments. - id : modularity name : Modularity description : Modularity of the code, i.e. appropriate use of functions and encapsulation. - id : structure name : Structure description : The quality of the code's structure, i.e. comprehensible variable names, nesting, and program flow. - id : idiomaticity name : Idiomaticity description : How idiomatic the code is, i.e. appropriate use of language-specific constructs (list comprehensions, enumerate(), etc. for Python).","title":"Configuration"},{"location":"configuration/#configuration","text":"INGInious Coding Style is highly configurable and provides granular control of the majority of its features. Despite this, extensive configuration is not necessary, as the plugin tries to implement sensible defaults, and therefore should just work straight out of the box.","title":"Configuration"},{"location":"configuration/#minimal-configuration","text":"The following YAML snippet provides the default plugin configuration, and is a good starting point for exploring the plugin's functionality: plugins : - plugin_module : inginious_coding_style name : \"INGInious Coding Style\" The minimal configuration enables all default categories: comments modularity structure idiomaticity . See Default Categories for more information about the default categories.","title":"Minimal Configuration"},{"location":"configuration/#full-configuration","text":"Below is an example of a configuration making use of all available configuration options. plugins : - plugin_module : inginious_coding_style name : \"INGInious Coding Style\" enabled : # This enables all default categories + 1 custom category - comments - modularity - structure - idiomaticity - coolness # Our custom category categories : # This is a definition for a new category - id : coolness name : Coolness description : How cool the code looks B-) # This redefines a default category - id : comments name : Kommentering description : Hvor godt kommentert koden er. submission_query : header : CSG priority : 3000 button : true weighted_mean : enabled : true weighting : 0.25 round : true round_digits : 2 task_list_bars : total_grade : enabled : true label : Grade base_grade : enabled : true label : Completion style_grade : enabled : true label : Coding Style show_graders : false","title":"Full Configuration"},{"location":"configuration/#parameters","text":"","title":"Parameters"},{"location":"configuration/#name","text":"Display name of the plugin default : 'INGInious Coding Style' type : string required : False","title":"name"},{"location":"configuration/#enabled","text":"Which coding style categories to enable. Omitting this parameter enables all default categories ( comments modularity structure idiomaticity ). default : [ 'comments' , 'modularity' , 'structure' , 'idiomaticity' ] type : array items : { 'type' : 'string' } required : False","title":"enabled"},{"location":"configuration/#categories","text":"Define new grading categories or modify default grading categories. Each category has the following parameters:","title":"categories"},{"location":"configuration/#id","text":"Unique ID of the category. type : string required : True","title":"id"},{"location":"configuration/#name_1","text":"Display name of category. Defaults to id.title() if omitted. type : string required : False","title":"name"},{"location":"configuration/#description","text":"Description of category. This should describe the criteria used for grading. type : string required : True","title":"description"},{"location":"configuration/#submission_query","text":"Settings for the submissions query results table ( /admin/<courseid>/submissions ).","title":"submission_query"},{"location":"configuration/#header","text":"The header text for the plugin's column in the query results table. default : 'CSG' type : string required : False","title":"header"},{"location":"configuration/#button","text":"Adds an additional button to each search result row that links to the submission's coding style grading page. default : True type : boolean required : False","title":"button"},{"location":"configuration/#priority","text":"The priority of the plugin hook. The priority must be a number that is unique to the plugin in order to avoid column ordering issues. In cases where the plugin's header does not match its corresponding column in the table body, try to change priority to a different number. Given the low number of INGInious plugins in existence, this should virtually never happen, though. default : 3000 type : integer required : False","title":"priority"},{"location":"configuration/#weighted_mean","text":"Calculates a new grade for submissions after they have received coding style grades by finding the mean of automated INGInious grade and coding style grades: new_grade = (automated_grade * (1 - weighting)) + (coding_style_grade_mean * weighting) Example >>> automated_grade = 100 >>> mean_style_grade = 80 >>> weighting = 0.25 >>> new_grade = ( automated_grade * ( 1 - weighting )) + ( mean_style_grade * weighting ) >>> new_grade 95.0","title":"weighted_mean"},{"location":"configuration/#enabled_1","text":"Enable weighted mean grade calculation. default : False type : boolean required : False","title":"enabled"},{"location":"configuration/#weighting","text":"How much of the final grade the coding style grades should make up.","title":"weighting"},{"location":"configuration/#round","text":"Whether to round the weighted mean grade or not. default : True type : boolean required : False","title":"round"},{"location":"configuration/#round_digits","text":"Number of digits after decimal point to round to. Has no effect if round is disabled. default : 2 minimum : 0 type : integer required : False","title":"round_digits"},{"location":"configuration/#task_list_bars","text":"Settings for the various bars displayed on the task list.","title":"task_list_bars"},{"location":"configuration/#total_grade","text":"The bar displaying the submission's final grade. This bar cannot be disabled, but its label can be.","title":"total_grade"},{"location":"configuration/#base_grade","text":"The bar displaying the submission's base grade (the grade given by the automatic INGInious grader). This bar can be disabled in its entirety.","title":"base_grade"},{"location":"configuration/#style_grade","text":"The bar displaying the submission's mean coding style grade. This bar can be disabled in its entirety.","title":"style_grade"},{"location":"configuration/#show_graders","text":"Display a list of tutors/admins who have graded the submission in the sidebar of a student submissions coding style grade page ( /submissions/<submissionid>/codingstyle ). default : False type : boolean required : False","title":"show_graders"},{"location":"configuration/#default-categories","text":"INGInious Coding Style comes with 4 default grading categories. If you want to change the names or descriptions of these categories, you can override them in your INGInious configuration file. Attention The id parameter of a category must match the default category's ID if you wish to overwrite a default category. If you simply wish to disable a default category, omit its ID from the top-level enabled parameter. The following is a YAML snippet that includes the definitions for all default categories, which can be added to the plugin configuration should you wish to expand on the existing decriptions or otherwise modify the categories: - id : comments name : Comments description : Appropriate use of comments. - id : modularity name : Modularity description : Modularity of the code, i.e. appropriate use of functions and encapsulation. - id : structure name : Structure description : The quality of the code's structure, i.e. comprehensible variable names, nesting, and program flow. - id : idiomaticity name : Idiomaticity description : How idiomatic the code is, i.e. appropriate use of language-specific constructs (list comprehensions, enumerate(), etc. for Python).","title":"Default Categories"},{"location":"developer-guide/","text":"Developer Guide \u00b6 WIP","title":"Developer Guide"},{"location":"developer-guide/#developer-guide","text":"WIP","title":"Developer Guide"},{"location":"installation/","text":"Installation \u00b6 INGInious Coding Style can be installed through pip: pip install inginious-coding-style Attention The plugin requires INGInious 0.7 or higher. It is possible that it works on previous versions of INGInious, but it has not been tested. Adding support for previous versions is not currently planned.","title":"Installation"},{"location":"installation/#installation","text":"INGInious Coding Style can be installed through pip: pip install inginious-coding-style Attention The plugin requires INGInious 0.7 or higher. It is possible that it works on previous versions of INGInious, but it has not been tested. Adding support for previous versions is not currently planned.","title":"Installation"},{"location":"tutorial/student-guide/","text":"Student Guide \u00b6 Grade Overview \u00b6 To get an overview of coding style grades for a course, access the course's task list. Coding Style grades are displayed as a separate bar beneath the regular automated grade provided by the INGInious grader. View Detailed Feedback \u00b6 To view detailed feedback for a specific submission, click on the new \"Coding Style Grades\" button in the sidebar for the task. Note The button is only visible if the submission's coding style has been graded. Detailed feedback is displayed similar to the admin grading interface.","title":"Student Guide"},{"location":"tutorial/student-guide/#student-guide","text":"","title":"Student Guide"},{"location":"tutorial/student-guide/#grade-overview","text":"To get an overview of coding style grades for a course, access the course's task list. Coding Style grades are displayed as a separate bar beneath the regular automated grade provided by the INGInious grader.","title":"Grade Overview"},{"location":"tutorial/student-guide/#view-detailed-feedback","text":"To view detailed feedback for a specific submission, click on the new \"Coding Style Grades\" button in the sidebar for the task. Note The button is only visible if the submission's coding style has been graded. Detailed feedback is displayed similar to the admin grading interface.","title":"View Detailed Feedback"},{"location":"tutorial/tutor-guide/","text":"Tutor Guide \u00b6 This section demonstrates how a tutor can access the grading interface for a specific assignment. Grade a Submission \u00b6 Click on the \"Submissions\" button to access the submission query page. Select the task you want to query submissions for. In the search result table, the plugin shows a new column (titled \"CSG\" by default) that contains status icons denoting whether or not submissions have been given coding style grades. Click on either the status icon or the new button ( if enabled ) to directly access the coding style grading interface. If you wish to view the submission before grading it (which is advisable), click on the magnifying glass icon. When viewing a student submission, click on the new \"Grade coding style\" button to access the grading interface for the submission. In the coding style grading interface, you can determine grades for each grading category and (optionally) give feedback. After you have finished grading the submission, click on the \"Submit\" button. A message is displayed at the top of the page denoting the status of the operation.","title":"Tutor Guide"},{"location":"tutorial/tutor-guide/#tutor-guide","text":"This section demonstrates how a tutor can access the grading interface for a specific assignment.","title":"Tutor Guide"},{"location":"tutorial/tutor-guide/#grade-a-submission","text":"Click on the \"Submissions\" button to access the submission query page. Select the task you want to query submissions for. In the search result table, the plugin shows a new column (titled \"CSG\" by default) that contains status icons denoting whether or not submissions have been given coding style grades. Click on either the status icon or the new button ( if enabled ) to directly access the coding style grading interface. If you wish to view the submission before grading it (which is advisable), click on the magnifying glass icon. When viewing a student submission, click on the new \"Grade coding style\" button to access the grading interface for the submission. In the coding style grading interface, you can determine grades for each grading category and (optionally) give feedback. After you have finished grading the submission, click on the \"Submit\" button. A message is displayed at the top of the page denoting the status of the operation.","title":"Grade a Submission"}]}